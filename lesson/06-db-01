## Задача 1

* Электронные чеки в json виде: Документо-ориентированная

* Склады и автомобильные дороги для логистической компании: Сетевая - иерархическая с множеством узлов, но в зависимости от целей, можно использовать графовую

* Генеалогические деревья: Иерархическая- класические деревья с одним родителем

* Кэш идентификаторов клиентов с ограниченным временем жизни для движка аутенфикации: Ключ-значение тоже класическая постановка задачи для данного типа

* Отношения клиент-покупка для интернет-магазина - Реляционная - так как тут отношение М:М, то логичнее использовать такое, и в каждом есть описание, но по терии лекции из NoSQL больше похоже на Графовую

## Задача 2

* Данные записываются на все узлы с задержкой до часа (асинхронная запись): CA, EL-PC
* При сетевых сбоях, система может разделиться на 2 раздельных кластера: AP, PA-EL
* Система может не прислать корректный ответ или сбросить соединение: CP, PA-EC

## Задача 3

* Принципы BASE и ACID сочетаться не могут. По ACID - данные согласованные, а по BASE - могут быть неверные, следовательно они противоречат друг другу.

## Задача 4

Redis и её минусы:

* Требуются достаточные ресурсы RAM(оперативной памяти) + нужно следить за достаточностью памяти отсутсвие поддержки языка SQL это является проблемой для оперативного поиска данных при отказе сервера все данные с последней синхронизации с диском будут утеряны